//给定两个单链表的头节点 headA 和 headB ，请找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 null

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 
//方法一：哈希set  s.count或者!s.insert(p).second都可以，因为insert返回值是pair，第二项是bool
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        ListNode* p=headA;
        unordered_set<ListNode*>s;
        while(p!=nullptr){
            s.insert(p);
            p=p->next;
        }
        p=headB;
        while(p!=nullptr){
            if(s.count(p)){
                return p;
            }
            p=p->next;
        }
        return NULL;
    }
};

//方法二：双指针 
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        if(headA==NULL||headB==NULL) return NULL;
        ListNode* pa=headA;
        ListNode* pb=headB;
        while(pa!=pb){
            pa=pa==NULL?headB:pa->next;
            pb=pb==NULL?headA:pb->next;
        }
        return pa;
        
    }
};
