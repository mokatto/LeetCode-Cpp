//给你一个链表的头节点 head ，判断链表中是否有环。
//如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。
//注意：pos 不作为参数进行传递 。仅仅是为了标识链表的实际情况。
//如果链表中存在环 ，则返回 true 。 否则，返回 false 。

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 
//方法一：哈希表
class Solution {
public:
    bool hasCycle(ListNode *head) {
        unordered_set<ListNode*>visited;
        while(head!=nullptr){
            if(visited.find(head)!=visited.end()){
                return true;
            }
            visited.insert(head);
            head=head->next;
        }
        return false;
    }
};

//方法二：快慢指针 龟兔赛跑 
//慢指针每次只移动一步，而快指针每次移动两步。初始时，慢指针在位置 head，而快指针在位置 head.next
//这样一来，如果在移动的过程中，快指针反过来追上慢指针，就说明该链表为环形链表,否则快指针将到达链表尾部，该链表不为环形链表
class Solution {
public:
    bool hasCycle(ListNode *head) {
        if(head==nullptr||head->next==nullptr) return false;
        ListNode* slow=head;
        ListNode* fast=head->next;
        while(slow!=fast){
            if(fast==nullptr||fast->next==nullptr){
                return false;
            }
            slow=slow->next;
            fast=fast->next->next;
        }
        return true;
    }
};
