//给你两棵二叉树 root 和 subRoot 。检验 root 中是否包含和 subRoot 具有相同结构和节点值的子树。如果存在，返回 true ；否则，返回 false 。
//二叉树 tree 的一棵子树包括 tree 的某个节点和这个节点的所有后代节点。tree 也可以看做它自身的一棵子树。

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

//方法一：深度优先暴力搜索
class Solution {
public:
    bool isSameTree(TreeNode* o,TreeNode* t){
        if(o==nullptr&&t==nullptr) return true;
        if((o==nullptr&&t!=nullptr)||(o!=nullptr&&t==nullptr)||(o->val!=t->val)) return false;
        return isSameTree(o->left,t->left)&&isSameTree(o->right,t->right);
    }

    bool dfs(TreeNode* o,TreeNode* t){
        if(o==nullptr) return false;
        return isSameTree(o,t)||dfs(o->left,t)||dfs(o->right,t);
    }

    bool isSubtree(TreeNode* root, TreeNode* subRoot) {
        return dfs(root,subRoot);
    }
};

//方法二：DFS序+KMP算法

